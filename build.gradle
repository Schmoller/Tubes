buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile 'com.mod-buildcraft:buildcraft:5.0.5:dev'
    // compile 'codechicken:ForgeMultipart:1.7.2-1.1.0.275:dev'
	compile files("lib/ForgeMultipart-1.7.10-1.1.0.null-dev.jar")
    compile 'codechicken:CodeChickenLib:1.7.10-1.1.1.93:dev'
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.1.8:dev'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.2.15:dev'
}

version = "2.0.3"
group= "au.com.addstar"
archivesBaseName = "Tubes"

def forge = "1.7.10-10.13.0.1160"

minecraft {
    version = "${forge}"
    assetDir = "eclipse/assets"
}

// Determine conf dir
def gradlePath = System.properties['user.home'] + "/.gradle"

if( System.properties['gradle.user.home'] != null ) {
    gradlePath = System.properties['gradle.user.home']
} else if( System.env['GRADLE_USER_HOME'] != null ) {
    gradlePath = System.env['GRADLE_USER_HOME']
}

def conf = gradlePath + "/caches/minecraft/net/minecraftforge/forge/${forge}/unpacked/conf"

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Process naming
sourceMainJava.doLast {
    def srcDir = "build/sources/java"
    exec {
        executable "pythonw"
        args "nameGenerator.py", "--conf", conf, "--src", srcDir
    }
}

// Normal jar
jar {
    version = "${minecraft.version}-${project.version}"
    manifest {
        attributes 'FMLCorePlugin': 'schmoller.tubes.asm.TubesPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

// Dev jar (deobfuscated)
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    version = "${minecraft.version}-${project.version}"
    manifest {
        attributes 'FMLCorePlugin': 'schmoller.tubes.asm.TubesPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

artifacts {
    archives devJar
}